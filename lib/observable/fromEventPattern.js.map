{"version":3,"sources":["../../es6/observable/fromEventPattern.js"],"names":[],"mappings":";;;;;;;;;qBA6CwB,gBAAgB;;4BA7ClB,kBAAkB;;;;+BAClB,qBAAqB;;;;2BACpB,eAAe;;;;IAChC,0BAA0B;AACjB,aADT,0BAA0B,CAChB,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE;8BADjC,0BAA0B;;AAExB,+BAAM,IAAI,CAAC,CAAC;AACZ,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;cANC,0BAA0B;;AAA1B,8BAA0B,WAO5B,UAAU,GAAA,oBAAC,WAAU,EAAE;AACnB,YAAI,WAAW,GAAG,SAAd,WAAW,GAAS;AACpB,gBAAI,MAAM,EAAE;AACR,sBAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;aAC/B;SACJ,CAAC;AACF,iBAAS,YAAY,CAAC,CAAC,EAAE;AACrB,gBAAI,MAAM,GAAG,CAAC,CAAC;AACf,gBAAI,QAAQ,EAAE;AACV,sBAAM,GAAG,0BAAU,QAAQ,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACpD,oBAAI,MAAM,iCAAc,EAAE;AACtB,+BAAU,CAAC,OAAO,CAAC,CAAC,6BAAU,CAAC,CAAC,CAAC;AACjC,+BAAW,EAAE,CAAC;AACd,2BAAO;iBACV;aACJ;AACD,kBAAM,GAAG,WAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACjC,gBAAI,MAAM,CAAC,IAAI,EAAE;AACb,2BAAW,EAAE,CAAC;aACjB;SACJ;AACD,YAAI,IAAI,GAAG,IAAI,CAAC;AAChB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACzB,YAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC7B,YAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACnC,eAAO,WAAW,CAAC;KACtB;;WAjCC,0BAA0B;;;;;;;;;;;AA0CjB,SAAS,gBAAgB,CAAC,UAAU,EAAyC;QAAvC,aAAa,gCAAG,IAAI;QAAE,QAAQ,gCAAG,IAAI;;AACtF,WAAO,IAAI,0BAA0B,CAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;CAC9E;;AACD,CAAC","file":"fromEventPattern.js","sourcesContent":["import try_catch from '../util/tryCatch';\nimport error_obj from '../util/errorObject';\nimport Observable from '../Observable';\nclass FromEventPatternObservable extends Observable {\n    constructor(add, remove, selector) {\n        super(null);\n        this.add = add;\n        this.remove = remove;\n        this.selector = selector;\n    }\n    subscriber(subscriber) {\n        var unsubscribe = () => {\n            if (remove) {\n                remove(innerHandler, token);\n            }\n        };\n        function innerHandler(e) {\n            var result = e;\n            if (selector) {\n                result = try_catch(selector).apply(this, arguments);\n                if (result === error_obj) {\n                    subscriber[\"throw\"](error_obj.e);\n                    unsubscribe();\n                    return;\n                }\n            }\n            result = subscriber.next(result);\n            if (result.done) {\n                unsubscribe();\n            }\n        }\n        var self = this;\n        var remove = this.remove;\n        var selector = this.selector;\n        var token = this.add(innerHandler);\n        return unsubscribe;\n    }\n}\n/**\n * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.\n * @param {Function} addHandler The function to add a handler to the emitter.\n * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.\n * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.\n * @returns {Observable} An observable sequence which wraps an event from an event emitter\n */\nexport default function fromEventPattern(addHandler, removeHandler = null, selector = null) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n}\n;\n"]}