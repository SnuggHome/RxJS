{"version":3,"sources":["../es6/ConnectableObservable.js"],"names":[],"mappings":";;;;2BAAuB,cAAc;;;;wBAChB,YAAY;;;;mCACV,wBAAwB;;;;iCAC1B,sBAAsB;;;;IACtB,qBAAqB;AAC3B,aADM,qBAAqB,CAC1B,MAAM,EAAE,cAAc,EAAE;0CADnB,qBAAqB;;AAElC,+BAAM,IAAI,CAAC,CAAC;AACZ,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,cAAc,GAAG,cAAc,CAAC;KACxC;;0BALgB,qBAAqB;;AAArB,yBAAqB,WAMtC,OAAO,GAAA,mBAAG;AACN,eAAO,+BAAS,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC;KACzD;;AARgB,yBAAqB,WAStC,WAAW,GAAA,uBAAG;AACV,eAAO,kBAAkB,CAAC,IAAI,CAAC,CAAC;KACnC;;AAXgB,yBAAqB,+CAY1B,UAAC,QAAQ,EAAE;AACnB,YAAI,EAAE,QAAQ,kCAAoB,AAAC,EAAE;AACjC,oBAAQ,GAAG,0BAAa,QAAQ,CAAC,CAAC;SACrC;AACD,YAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;AAC5C,gBAAI,IAAI,CAAC,YAAY,EAAE;AACnB,oBAAI,CAAC,YAAY,GAAG,SAAS,CAAC;aACjC;AACD,gBAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;SACxC;AACD,eAAO,IAAI,CAAC,OAAO,kCAAY,CAAC,QAAQ,CAAC,CAAC;KAC7C;;AAvBgB,yBAAqB,WAwBtC,QAAQ,GAAA,oBAAG;AACP,eAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;KACvC;;WA1BgB,qBAAqB;;;qBAArB,qBAAqB;;IA4BpC,kBAAkB;AACT,aADT,kBAAkB,CACR,MAAM,EAAE;0CADlB,kBAAkB;;AAEhB,gCAAM,IAAI,CAAC,CAAC;AACZ,YAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAClB,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;0BALC,kBAAkB;;AAAlB,sBAAkB,WAMpB,UAAU,GAAA,oBAAC,QAAQ,EAAE;;;AACjB,YAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,YAAI,CAAC,MAAM,kCAAY,CAAC,QAAQ,CAAC,CAAC;AAClC,YAAI,aAAa,GAAG,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC;AACxC,YAAI,aAAa,EAAE;AACf,gBAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;SAC3D;AACD,eAAO,YAAM;AACT,gBAAI,QAAQ,GAAG,MAAK,QAAQ,EAAE,CAAC;AAC/B,gBAAI,QAAQ,KAAK,CAAC,EAAE;AAChB,sBAAK,sBAAsB,CAAC,WAAW,EAAE,CAAC;aAC7C;SACJ,CAAC;KACL;;WAnBC,kBAAkB;;;AAqBxB,SAAS,kBAAkB,CAAC,WAAW,EAAE;AACrC,QAAI,CAAC,WAAW,CAAC,YAAY,EAAE;AAC3B,YAAI,CAAC,WAAW,CAAC,OAAO,EAAE;AACtB,uBAAW,CAAC,OAAO,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;SACtD;AACD,mBAAW,CAAC,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KAChF;AACD,WAAO,WAAW,CAAC,YAAY,CAAC;CACnC","file":"dist/es6/ConnectableObservable.js","sourcesContent":["import Observable from './Observable';\nimport Observer from './Observer';\nimport $$observer from './util/Symbol_observer';\nimport nextTick from './scheduler/nextTick';\nexport default class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super(null);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n    }\n    connect() {\n        return nextTick.schedule(0, this, dispatchConnection);\n    }\n    connectSync() {\n        return dispatchConnection(this);\n    }\n    [$$observer](observer) {\n        if (!(observer instanceof Observer)) {\n            observer = new Observer(observer);\n        }\n        if (!this.subject || this.subject.unsubscribed) {\n            if (this.subscription) {\n                this.subscription = undefined;\n            }\n            this.subject = this.subjectFactory();\n        }\n        return this.subject[$$observer](observer);\n    }\n    refCount() {\n        return new RefCountObservable(this);\n    }\n}\nclass RefCountObservable extends Observable {\n    constructor(source) {\n        super(null);\n        this.refCount = 0;\n        this.source = source;\n    }\n    subscriber(observer) {\n        this.refCount++;\n        this.source[$$observer](observer);\n        var shouldConnect = this.refCount === 1;\n        if (shouldConnect) {\n            this.connectionSubscription = this.source.connectSync();\n        }\n        return () => {\n            var refCount = this.refCount--;\n            if (refCount === 0) {\n                this.connectionSubscription.unsubscribe();\n            }\n        };\n    }\n}\nfunction dispatchConnection(connectable) {\n    if (!connectable.subscription) {\n        if (!connectable.subject) {\n            connectable.subject = connectable.subjectFactory();\n        }\n        connectable.subscription = connectable.source.subscribe(connectable.subject);\n    }\n    return connectable.subscription;\n}\n"]}